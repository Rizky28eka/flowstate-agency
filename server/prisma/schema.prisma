// Enhanced Prisma Schema - Professional Implementation
// Multi-Tenant SaaS Platform for Project & Business Management

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum RoleLevel {
  GUEST
  MEMBER
  ADMIN
  OWNER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectVisibility {
  PRIVATE
  TEAM
  ORGANIZATION
}

enum ProjectHealth {
  ON_TRACK
  AT_RISK
  OFF_TRACK
}

enum ProjectBillingType {
  FIXED
  HOURLY
  MILESTONE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  BLOCKED
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskType {
  TASK
  BUG
  FEATURE
  IMPROVEMENT
}

enum MilestoneStatus {
  PENDING
  COMPLETED
  DELAYED
}

enum TimeEntryType {
  MANUAL
  TIMER
}

enum CompanySize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  PROSPECTING
  CHURNED
}

enum ClientType {
  CLIENT
  PROSPECT
  PARTNER
}

enum InvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PARTIAL
  PAID
  OVERDUE
  CANCELLED
  VOID
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  CASH
  CHECK
  PAYPAL
  STRIPE
  OTHER
}

enum TeamType {
  REGULAR
  DEPARTMENT
  PROJECT_BASED
}

enum TeamMemberRole {
  LEADER
  MEMBER
  VIEWER
}

enum TagType {
  PROJECT
  TASK
  CLIENT
  GENERAL
}

enum DocumentFileType {
  PDF
  DOCX
  XLSX
  IMAGE
  OTHER
}

enum NotificationType {
  TASK_ASSIGNED
  COMMENT_MENTION
  DUE_DATE
  OTHER
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ActivityAction {
  CREATED
  UPDATED
  DELETED
  COMPLETED
  ASSIGNED
  OTHER
}

enum ActivityEntityType {
  PROJECT
  TASK
  INVOICE
  CLIENT
  USER
  ORGANIZATION
  OTHER
}

enum AuditLogAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  OTHER
}

enum ReportType {
  FINANCIAL
  RESOURCE
  CLIENT
  PROJECT
  TIME
  CUSTOM
}

enum ReportFormat {
  JSON
  PDF
  EXCEL
  CSV
}

enum ReportStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ReportVisibility {
  PRIVATE
  TEAM
  ORGANIZATION
}

enum EmailLogStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

enum IntegrationProvider {
  SLACK
  GITHUB
  JIRA
  TRELLO
  GOOGLE
  OTHER
}

enum IntegrationType {
  OAUTH
  API_KEY
  WEBHOOK
}

enum IntegrationStatus {
  ACTIVE
  INACTIVE
  ERROR
}

enum IntegrationSyncStatus {
  IDLE
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum CustomFieldType {
  TEXT
  NUMBER
  DATE
  SELECT
  MULTISELECT
  CHECKBOX
  URL
  EMAIL
  OTHER
}

enum CustomFieldEntityType {
  PROJECT
  TASK
  CLIENT
  INVOICE
  USER
  ORGANIZATION
  OTHER
}

enum SavedViewType {
  LIST
  BOARD
  CALENDAR
  TIMELINE
  TABLE
}

enum SavedViewEntityType {
  PROJECTS
  TASKS
  CLIENTS
  INVOICES
  USERS
  REPORTS
}

enum RecurringTaskPattern {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  CUSTOM
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum BillingHistoryStatus {
  PAID
  PENDING
  FAILED
  REFUNDED
}

enum NoteEntityType {
  PROJECT
  TASK
  CLIENT
  INVOICE
  USER
  ORGANIZATION
  OTHER
}

enum BookmarkEntityType {
  PROJECT
  TASK
  CLIENT
  INVOICE
  USER
  REPORT
  OTHER
}

enum KnowledgeBaseCategoryType {
  GENERAL
  FAQ
  TUTORIAL
  VIDEO
}

enum TutorialStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum VideoProvider {
  YOUTUBE
  VIMEO
  OTHER
}

enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  REIMBURSED
}

enum PurchaseOrderStatus {
  DRAFT
  SENT
  APPROVED
  FULFILLED
  CANCELLED
}

enum CreditNoteStatus {
  OPEN
  APPLIED
  VOID
}

enum BudgetCategoryPeriod {
  MONTHLY
  QUARTERLY
  YEARLY
  ONE_TIME
}

enum PaymentScheduleStatus {
  PENDING
  PAID
  OVERDUE
}

// ==================================================
// MULTI-TENANCY & CORE MODELS
// ==================================================

model Organization {
  id                 String             @id @default(cuid())
  name               String             @db.VarChar(255)
  slug               String             @unique @db.VarChar(100)
  domain             String?            @db.VarChar(255)
  logo               String?            @db.VarChar(500)
  timezone           String             @default("UTC") @db.VarChar(50)
  currency           String             @default("USD") @db.VarChar(3)
  settings           Json?
  subscriptionTier   SubscriptionPlan   @default(FREE)
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  maxUsers           Int                @default(5)
  maxProjects        Int                @default(10)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  deletedAt          DateTime?

  // Relations
  users            User[]
  projects         Project[]
  invoices         Invoice[]
  clients          Client[]
  teams            Team[]
  roles            Role[]
  permissions      Permission[]
  apiKeys          ApiKey[]
  reports          Report[]
  tags             Tag[]
  auditLogs        AuditLog[]
  activities       Activity[]
  emailLogs        EmailLog[]
  projectTemplates ProjectTemplate[]
  documents        Document[]

  // New back-relations
  webhooks       Webhook[]
  integrations   Integration[]
  customFields   CustomField[]
  savedViews     SavedView[]
  recurringTasks RecurringTask[]
  automations    Automation[]
  subscription   Subscription?
  billingHistory BillingHistory[]
  notes          Note[]
  knowledgeBases KnowledgeBase[]

  // Financial Management back-relations
  expenseCategories ExpenseCategory[]
  expenses          Expense[]
  vendors           Vendor[]
  purchaseOrders    PurchaseOrder[]
  creditNotes       CreditNote[]
  budgetCategories  BudgetCategory[]

  @@index([slug])
  @@index([subscriptionStatus])
  @@map("organizations")
}

model User {
  id               String     @id @default(cuid())
  email            String     @unique @db.VarChar(255)
  name             String?    @db.VarChar(255)
  firstName        String?    @db.VarChar(100)
  lastName         String?    @db.VarChar(100)
  avatarUrl        String?    @db.VarChar(500)
  password         String     @db.VarChar(255)
  phoneNumber      String?    @db.VarChar(50)
  bio              String?    @db.Text
  title            String?    @db.VarChar(100) // Job title
  department       String?    @db.VarChar(100)
  hourlyRate       Float?
  status           UserStatus @default(ACTIVE)
  lastLoginAt      DateTime?
  emailVerified    Boolean    @default(false)
  twoFactorEnabled Boolean    @default(false)
  preferences      Json? // UI preferences, notifications settings, etc
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  deletedAt        DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Relations
  roles             UserRole[]
  teams             TeamMember[]
  tasksAssigned     Task[]         @relation("TaskAssignee")
  tasksCreated      Task[]         @relation("TaskCreator")
  apiKeys           ApiKey[]
  timeEntries       TimeEntry[]
  comments          Comment[]
  notifications     Notification[]
  notificationsSent Notification[] @relation("NotificationSender")
  activities        Activity[]
  auditLogsCreated  AuditLog[]     @relation("AuditCreator")
  documentsUploaded Document[]     @relation("DocumentUploader")
  projectsCreated   Project[]      @relation("ProjectCreator")
  clientsCreated    Client[]       @relation("ClientCreator")
  contacts          Contact[]      @relation("ContactCreator")

  // New back-relations
  savedViews SavedView[]
  notes      Note[]
  bookmarks  Bookmark[]

  // Knowledge Base back-relations
  createdFaqs       FAQ[]          @relation("FAQAuthor")
  authoredTutorials Tutorial[]     @relation("TutorialAuthor")
  uploadedVideos    VideoLibrary[] @relation("VideoUploader")

  // Financial Management back-relations
  expenses               Expense[]
  approvedPurchaseOrders PurchaseOrder[] @relation("PurchaseOrderApprover")

  @@index([organizationId])
  @@index([email])
  @@index([status])
  @@index([deletedAt])
  @@map("users")
}

// ==================================================
// RBAC - ROLES & PERMISSIONS
// ==================================================

model Role {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  slug        String   @db.VarChar(100)
  description String?  @db.Text
  level       Int      @default(0) // Hierarchy level (higher = more privileges)
  isSystem    Boolean  @default(false) // System roles can't be deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Relations
  users       UserRole[]
  permissions RolePermission[]

  @@unique([organizationId, slug])
  @@index([organizationId])
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  slug        String   @db.VarChar(100) // e.g., project.create, user.delete
  resource    String   @db.VarChar(50) // e.g., project, user, invoice
  action      String   @db.VarChar(50) // e.g., create, read, update, delete
  description String?  @db.Text
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Relations
  roles RolePermission[]

  @@unique([organizationId, slug])
  @@index([organizationId])
  @@index([resource, action])
  @@map("permissions")
}

model UserRole {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String? // userId who assigned this role

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String
  assignedAt   DateTime   @default(now())

  @@id([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

// ==================================================
// PROJECT MANAGEMENT
// ==================================================

model Project {
  id          String             @id @default(cuid())
  name        String             @db.VarChar(255)
  slug        String             @db.VarChar(255)
  description String?            @db.Text
  status      ProjectStatus      @default(PLANNING)
  priority    ProjectPriority    @default(MEDIUM)
  visibility  ProjectVisibility  @default(PRIVATE)
  health      ProjectHealth      @default(ON_TRACK)
  billingType ProjectBillingType @default(FIXED)
  hourlyRate  Float?
  budget      Float? // Overall project budget
  startDate   DateTime?
  endDate     DateTime?
  metadata    Json? // Custom fields
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  client   Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)
  clientId String?

  team   Team?   @relation(fields: [teamId], references: [id], onDelete: SetNull)
  teamId String?

  template   ProjectTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateId String?

  createdBy   User   @relation("ProjectCreator", fields: [createdById], references: [id], onDelete: SetNull)
  createdById String

  // Relations
  tasks       Task[]
  invoices    Invoice[]
  timeEntries TimeEntry[]
  tags        ProjectTag[]
  milestones  Milestone[]
  documents   Document[]
  comments    Comment[]
  activities  Activity[]

  // New back-relations
  recurringTasks RecurringTask[]

  // Financial Management back-relations
  expenses         Expense[]
  budgetCategories BudgetCategory[]

  @@unique([organizationId, slug])
  @@index([organizationId])
  @@index([clientId])
  @@index([teamId])
  @@index([status])
  @@index([createdById])
  @@index([deletedAt])
  @@map("projects")
}

model ProjectTemplate {
  id                String   @id @default(cuid())
  name              String   @db.VarChar(255)
  description       String?  @db.Text
  category          String?  @db.VarChar(100)
  isPublic          Boolean  @default(false)
  usageCount        Int      @default(0)
  estimatedDuration Int? // in days
  defaultBudget     Float?
  templateData      Json // Store structure, default tasks, etc
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Relations
  projects Project[]

  @@index([organizationId])
  @@index([category])
  @@map("project_templates")
}

model Milestone {
  id          String          @id @default(cuid())
  name        String          @db.VarChar(255)
  description String?         @db.Text
  dueDate     DateTime
  completedAt DateTime?
  status      MilestoneStatus @default(PENDING)
  order       Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  // Relations
  tasks Task[]

  @@index([projectId])
  @@index([dueDate])
  @@map("milestones")
}

model Task {
  id               String       @id @default(cuid())
  title            String       @db.VarChar(500)
  description      String?      @db.Text
  status           TaskStatus   @default(TODO)
  priority         TaskPriority @default(MEDIUM)
  type             TaskType     @default(TASK)
  dueDate          DateTime?
  startDate        DateTime?
  completedAt      DateTime?
  estimatedHours   Float?
  actualHours      Float        @default(0)
  position         Int          @default(0) // For ordering/sorting
  isRecurring      Boolean      @default(false)
  recurringPattern String?      @db.VarChar(100) // daily, weekly, monthly, etc
  parentTaskId     String? // For subtasks
  metadata         Json?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  deletedAt        DateTime?

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId String?

  createdBy   User   @relation("TaskCreator", fields: [createdById], references: [id], onDelete: SetNull)
  createdById String

  milestone   Milestone? @relation(fields: [milestoneId], references: [id], onDelete: SetNull)
  milestoneId String?

  parentTask Task?  @relation("TaskSubtasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subtasks   Task[] @relation("TaskSubtasks")

  // Relations
  timeEntries TimeEntry[]
  tags        TaskTag[]
  comments    Comment[]
  documents   Document[]
  activities  Activity[]

  @@index([projectId])
  @@index([assigneeId])
  @@index([createdById])
  @@index([milestoneId])
  @@index([status])
  @@index([dueDate])
  @@index([parentTaskId])
  @@index([deletedAt])
  @@map("tasks")
}

// ==================================================
// TIME TRACKING
// ==================================================

model TimeEntry {
  id             String    @id @default(cuid())
  description    String?   @db.Text
  startTime      DateTime
  endTime        DateTime?
  duration       Int? // in minutes
  isBillable     Boolean   @default(true)
  hourlyRate     Float?
  billableAmount Float?
  isManual       Boolean   @default(false) // Manual entry vs timer
  isLocked       Boolean   @default(false) // Prevent editing
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  task   Task?   @relation(fields: [taskId], references: [id], onDelete: SetNull)
  taskId String?

  invoice   Invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  invoiceId String?

  @@index([userId])
  @@index([projectId])
  @@index([taskId])
  @@index([invoiceId])
  @@index([startTime])
  @@index([isBillable])
  @@map("time_entries")
}

// ==================================================
// CLIENT & CONTACT MANAGEMENT
// ==================================================

model Client {
  id                 String       @id @default(cuid())
  name               String       @db.VarChar(255)
  companyName        String?      @db.VarChar(255)
  email              String?      @db.VarChar(255)
  phone              String?      @db.VarChar(50)
  website            String?      @db.VarChar(255)
  address            String?      @db.Text
  city               String?      @db.VarChar(100)
  state              String?      @db.VarChar(100)
  country            String?      @db.VarChar(100)
  postalCode         String?      @db.VarChar(20)
  industry           String?      @db.VarChar(100)
  companySize        CompanySize?
  status             ClientStatus @default(ACTIVE)
  type               ClientType   @default(CLIENT)
  rating             Int? // 1-5 stars
  totalBilled        Float        @default(0)
  totalPaid          Float        @default(0)
  outstandingBalance Float        @default(0)
  lifetimeValue      Float        @default(0)
  satisfactionScore  Float? // 0-10
  avatarUrl          String?      @db.VarChar(500)
  taxId              String?      @db.VarChar(100)
  notes              String?      @db.Text
  metadata           Json?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  deletedAt          DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  createdBy   User   @relation("ClientCreator", fields: [createdById], references: [id], onDelete: SetNull)
  createdById String

  // Relations
  projects   Project[]
  invoices   Invoice[]
  contacts   Contact[]
  activities Activity[]
  clientTags ClientTag[]

  // Financial Management back-relations
  creditNotes CreditNote[]
  documents   Document[]

  @@index([organizationId])
  @@index([status])
  @@index([createdById])
  @@index([deletedAt])
  @@map("clients")
}

model Contact {
  id             String    @id @default(cuid())
  firstName      String    @db.VarChar(100)
  lastName       String    @db.VarChar(100)
  email          String    @db.VarChar(255)
  phone          String?   @db.VarChar(50)
  mobilePhone    String?   @db.VarChar(50)
  title          String?   @db.VarChar(100) // Job title
  department     String?   @db.VarChar(100)
  isPrimary      Boolean   @default(false)
  isActive       Boolean   @default(true)
  notes          String?   @db.Text
  birthday       DateTime?
  socialLinkedIn String?   @db.VarChar(255)
  socialTwitter  String?   @db.VarChar(255)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String

  createdBy   User   @relation("ContactCreator", fields: [createdById], references: [id], onDelete: SetNull)
  createdById String

  @@index([clientId])
  @@index([email])
  @@index([isPrimary])
  @@index([createdById])
  @@index([deletedAt])
  @@map("contacts")
}

// ==================================================
// FINANCIAL MANAGEMENT
// ==================================================

model Invoice {
  id             String        @id @default(cuid())
  invoiceNumber  String        @db.VarChar(50)
  title          String?       @db.VarChar(255)
  status         InvoiceStatus @default(DRAFT)
  discountType   DiscountType?
  discountValue  Float?
  discountAmount Float         @default(0)
  total          Float         @default(0)
  amountPaid     Float         @default(0)
  amountDue      Float         @default(0)
  currency       String        @default("USD") @db.VarChar(3)
  dueDate        DateTime
  issuedDate     DateTime      @default(now())
  sentAt         DateTime?
  viewedAt       DateTime?
  paidAt         DateTime?
  voidedAt       DateTime?
  paymentTerms   String?       @db.VarChar(100) // Net 30, Due on receipt, etc
  notes          String?       @db.Text
  footer         String?       @db.Text
  metadata       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId String?

  client   Client @relation(fields: [clientId], references: [id], onDelete: Restrict)
  clientId String

  // Relations
  items            InvoiceItem[]
  payments         Payment[]
  timeEntries      TimeEntry[]
  creditNotes      CreditNote[]
  paymentSchedules PaymentSchedule[]

  @@unique([organizationId, invoiceNumber])
  @@index([organizationId])
  @@index([projectId])
  @@index([clientId])
  @@index([status])
  @@index([dueDate])
  @@index([deletedAt])
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  description String   @db.Text
  quantity    Float    @default(1)
  unitPrice   Float
  amount      Float
  taxRate     Float    @default(0)
  taxAmount   Float    @default(0)
  total       Float
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String

  @@index([invoiceId])
  @@map("invoice_items")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  paymentMethod PaymentMethod
  reference     String?       @db.VarChar(255) // Transaction ID, check number, etc
  notes         String?       @db.Text
  receivedAt    DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String

  @@index([invoiceId])
  @@index([receivedAt])
  @@map("payments")
}

// ==================================================
// TEAM MANAGEMENT
// ==================================================

model Team {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(255)
  slug        String    @db.VarChar(255)
  description String?   @db.Text
  avatarUrl   String?   @db.VarChar(500)
  type        TeamType  @default(REGULAR)
  isActive    Boolean   @default(true)
  maxMembers  Int?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Relations
  members  TeamMember[]
  projects Project[]

  @@unique([organizationId, slug])
  @@index([organizationId])
  @@index([deletedAt])
  @@map("teams")
}

model TeamMember {
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  team     Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String
  role     TeamMemberRole // leader, member, viewer
  joinedAt DateTime       @default(now())
  leftAt   DateTime?

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])
  @@index([role])
  @@map("team_members")
}

// ==================================================
// TAGGING SYSTEM
// ==================================================

model Tag {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  slug        String   @db.VarChar(100)
  color       String?  @db.VarChar(7) // Hex color
  description String?  @db.Text
  type        TagType
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Relations
  projects ProjectTag[]
  tasks    TaskTag[]
  clients  ClientTag[]

  @@unique([organizationId, slug, type])
  @@index([organizationId])
  @@index([type])
  @@map("tags")
}

model ProjectTag {
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String
  addedAt   DateTime @default(now())

  @@id([projectId, tagId])
  @@index([projectId])
  @@index([tagId])
  @@map("project_tags")
}

model TaskTag {
  task    Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId  String
  tag     Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId   String
  addedAt DateTime @default(now())

  @@id([taskId, tagId])
  @@index([taskId])
  @@index([tagId])
  @@map("task_tags")
}

model ClientTag {
  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId    String
  addedAt  DateTime @default(now())

  @@id([clientId, tagId])
  @@index([clientId])
  @@index([tagId])
  @@map("client_tags")
}

// ==================================================
// DOCUMENT MANAGEMENT
// ==================================================

model Document {
  id            String           @id @default(cuid())
  name          String           @db.VarChar(255)
  originalName  String           @db.VarChar(255)
  description   String?          @db.Text
  fileType      DocumentFileType
  mimeType      String           @db.VarChar(100)
  size          Int // in bytes
  url           String           @db.VarChar(1000)
  storageKey    String           @db.VarChar(500) // S3 key or storage identifier
  thumbnailUrl  String?          @db.VarChar(1000)
  isPublic      Boolean          @default(false)
  downloadCount Int              @default(0)
  version       Int              @default(1)
  checksum      String?          @db.VarChar(255) // For integrity checks
  metadata      Json?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  deletedAt     DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  uploadedBy   User   @relation("DocumentUploader", fields: [uploadedById], references: [id], onDelete: SetNull)
  uploadedById String

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String?

  client   Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String?

  @@index([organizationId])
  @@index([uploadedById])
  @@index([projectId])
  @@index([taskId])
  @@index([clientId])
  @@index([fileType])
  @@index([deletedAt])
  @@map("documents")
}

// ==================================================
// COMMENTS & COLLABORATION
// ==================================================

model Comment {
  id        String    @id @default(cuid())
  content   String    @db.Text
  isEdited  Boolean   @default(false)
  editedAt  DateTime?
  isPinned  Boolean   @default(false)
  metadata  Json? // For mentions, attachments references, etc
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String?

  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId String?
  replies         Comment[] @relation("CommentReplies")

  @@index([authorId])
  @@index([projectId])
  @@index([taskId])
  @@index([parentCommentId])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("comments")
}

// ==================================================
// NOTIFICATIONS & ACTIVITY
// ==================================================

model Notification {
  id        String               @id @default(cuid())
  type      NotificationType
  title     String               @db.VarChar(255)
  message   String               @db.Text
  actionUrl String?              @db.VarChar(500)
  isRead    Boolean              @default(false)
  readAt    DateTime?
  priority  NotificationPriority @default(NORMAL)
  metadata  Json?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  recipient   User   @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String

  sender   User?   @relation("NotificationSender", fields: [senderId], references: [id], onDelete: SetNull)
  senderId String?

  @@index([recipientId])
  @@index([senderId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

model Activity {
  id          String             @id @default(cuid())
  action      ActivityAction
  entityType  ActivityEntityType
  entityId    String             @db.VarChar(50)
  description String             @db.Text
  changes     Json? // Store before/after values
  ipAddress   String?            @db.VarChar(50)
  userAgent   String?            @db.VarChar(500)
  metadata    Json?
  createdAt   DateTime           @default(now())

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?

  task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String?

  client   Client? @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String?

  @@index([organizationId])
  @@index([userId])
  @@index([entityType, entityId])
  @@index([projectId])
  @@index([taskId])
  @@index([clientId])
  @@index([createdAt])
  @@map("activities")
}

// ==================================================
// AUDIT TRAIL
// ==================================================

model AuditLog {
  id           String         @id @default(cuid())
  action       AuditLogAction
  resource     String         @db.VarChar(100) // Table/Model name
  resourceId   String?        @db.VarChar(50)
  oldValues    Json? // Previous state
  newValues    Json? // New state
  ipAddress    String?        @db.VarChar(50)
  userAgent    String?        @db.VarChar(500)
  statusCode   Int? // HTTP status code
  errorMessage String?        @db.Text
  duration     Int? // Request duration in ms
  metadata     Json?
  createdAt    DateTime       @default(now())

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  user   User?   @relation("AuditCreator", fields: [userId], references: [id], onDelete: SetNull)
  userId String?

  @@index([organizationId])
  @@index([userId])
  @@index([resource, resourceId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

// ==================================================
// EMAIL & COMMUNICATION
// ==================================================

model EmailLog {
  id           String         @id @default(cuid())
  from         String         @db.VarChar(255)
  to           String         @db.VarChar(255)
  cc           String?        @db.Text
  bcc          String?        @db.Text
  subject      String         @db.VarChar(500)
  body         String         @db.Text
  htmlBody     String?        @db.Text
  status       EmailLogStatus @default(PENDING)
  provider     String?        @db.VarChar(50) // sendgrid, mailgun, ses, etc
  providerId   String?        @db.VarChar(255) // External ID from email provider
  errorMessage String?        @db.Text
  openedAt     DateTime?
  clickedAt    DateTime?
  sentAt       DateTime?
  metadata     Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@index([organizationId])
  @@index([to])
  @@index([status])
  @@index([sentAt])
  @@index([createdAt])
  @@map("email_logs")
}

// ==================================================
// API & SECURITY
// ==================================================

model ApiKey {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(255)
  key         String    @unique @db.VarChar(255)
  description String?   @db.Text
  permissions Json? // Scoped permissions
  lastUsedAt  DateTime?
  usageCount  Int       @default(0)
  rateLimit   Int? // Requests per hour
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  revokedAt   DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([organizationId])
  @@index([userId])
  @@index([key])
  @@index([isActive])
  @@index([expiresAt])
  @@map("api_keys")
}

// ==================================================
// REPORTING & ANALYTICS
// ==================================================

model Report {
  id              String                @id @default(cuid())
  title           String                @db.VarChar(255)
  description     String?               @db.Text
  type            ReportType
  format          ReportFormat          @default(JSON)
  status          ReportStatus          @default(DRAFT)
  visibility      ReportVisibility      @default(PRIVATE)
  schedulePattern RecurringTaskPattern?
  lastGeneratedAt DateTime?
  viewCount       Int                   @default(0)
  content         Json? // Report data and configuration
  metadata        Json?
  generatedBy     String                @db.VarChar(100)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@index([organizationId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("reports")
}

// ==================================================
// WEBHOOKS & INTEGRATIONS
// ==================================================

model Webhook {
  id              String    @id @default(cuid())
  name            String    @db.VarChar(255)
  url             String    @db.VarChar(1000)
  description     String?   @db.Text
  events          Json // Array of events to listen to
  secret          String?   @db.VarChar(255) // For signature verification
  isActive        Boolean   @default(true)
  lastTriggeredAt DateTime?
  failureCount    Int       @default(0)
  successCount    Int       @default(0)
  headers         Json? // Custom headers
  retryPolicy     Json? // Retry configuration
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Relations
  logs WebhookLog[]

  @@index([organizationId])
  @@index([isActive])
  @@map("webhooks")
}

model WebhookLog {
  id            String   @id @default(cuid())
  event         String   @db.VarChar(100)
  payload       Json
  response      Json?
  statusCode    Int?
  duration      Int? // in ms
  success       Boolean
  errorMessage  String?  @db.Text
  attemptNumber Int      @default(1)
  createdAt     DateTime @default(now())

  webhook   Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)
  webhookId String

  @@index([webhookId])
  @@index([event])
  @@index([success])
  @@index([createdAt])
  @@map("webhook_logs")
}

model Integration {
  id           String                 @id @default(cuid())
  name         String                 @db.VarChar(255)
  provider     IntegrationProvider
  type         IntegrationType
  status       IntegrationStatus      @default(ACTIVE)
  syncStatus   IntegrationSyncStatus?
  errorMessage String?                @db.Text
  metadata     Json?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@index([organizationId])
  @@index([provider])
  @@index([status])
  @@map("integrations")
}

// ==================================================
// CUSTOM FIELDS & FORMS
// ==================================================

model CustomField {
  id           String                @id @default(cuid())
  name         String                @db.VarChar(255)
  slug         String                @db.VarChar(255)
  description  String?               @db.Text
  fieldType    CustomFieldType
  entityType   CustomFieldEntityType
  options      Json? // For select/multiselect fields
  defaultValue String?               @db.Text
  isRequired   Boolean               @default(false)
  isVisible    Boolean               @default(true)
  isSearchable Boolean               @default(false)
  validation   Json? // Validation rules
  order        Int                   @default(0)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Relations
  values CustomFieldValue[]

  @@unique([organizationId, entityType, slug])
  @@index([organizationId])
  @@index([entityType])
  @@map("custom_fields")
}

model CustomFieldValue {
  id        String   @id @default(cuid())
  value     String   @db.Text
  entityId  String   @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  field   CustomField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId String

  @@unique([fieldId, entityId])
  @@index([fieldId])
  @@index([entityId])
  @@map("custom_field_values")
}

// ==================================================
// SAVED FILTERS & VIEWS
// ==================================================

model SavedView {
  id          String              @id @default(cuid())
  name        String              @db.VarChar(255)
  description String?             @db.Text
  viewType    SavedViewType
  entityType  SavedViewEntityType
  filters     Json // Filter configuration
  sorting     Json? // Sort configuration
  grouping    Json? // Group configuration
  columns     Json? // Visible columns
  isDefault   Boolean             @default(false)
  isPublic    Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  @@index([organizationId])
  @@index([createdById])
  @@index([entityType])
  @@map("saved_views")
}

// ==================================================
// RECURRING TASKS & AUTOMATION
// ==================================================

model RecurringTask {
  id           String               @id @default(cuid())
  title        String               @db.VarChar(500)
  description  String?              @db.Text
  pattern      RecurringTaskPattern
  frequency    Int                  @default(1)
  dayOfWeek    Int? // 0-6 for weekly tasks
  dayOfMonth   Int? // 1-31 for monthly tasks
  startDate    DateTime
  endDate      DateTime?
  nextRunDate  DateTime
  lastRunDate  DateTime?
  isActive     Boolean              @default(true)
  taskTemplate Json // Template for creating tasks
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@index([organizationId])
  @@index([projectId])
  @@index([nextRunDate])
  @@index([isActive])
  @@map("recurring_tasks")
}

model Automation {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(255)
  description String?   @db.Text
  trigger     Json // Trigger configuration (event, conditions)
  actions     Json // Actions to perform
  isActive    Boolean   @default(true)
  runCount    Int       @default(0)
  lastRunAt   DateTime?
  errorCount  Int       @default(0)
  lastError   String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@index([organizationId])
  @@index([isActive])
  @@map("automations")
}

// ==================================================
// SUBSCRIPTION & BILLING
// ==================================================

model Subscription {
  id                   String             @id @default(cuid())
  plan                 SubscriptionPlan
  status               SubscriptionStatus
  billingCycle         BillingCycle
  amount               Float
  currency             String             @default("USD") @db.VarChar(3)
  startDate            DateTime
  endDate              DateTime?
  cancelledAt          DateTime?
  trialEndsAt          DateTime?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  stripeCustomerId     String?            @db.VarChar(255)
  stripeSubscriptionId String?            @db.VarChar(255)
  paymentMethod        Json?
  metadata             Json?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @unique

  @@index([organizationId])
  @@index([status])
  @@map("subscriptions")
}

model BillingHistory {
  id              String               @id @default(cuid())
  amount          Float
  currency        String               @default("USD") @db.VarChar(3)
  status          BillingHistoryStatus
  description     String?              @db.Text
  invoiceUrl      String?              @db.VarChar(1000)
  stripeInvoiceId String?              @db.VarChar(255)
  paidAt          DateTime?
  createdAt       DateTime             @default(now())

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@index([organizationId])
  @@index([status])
  @@index([createdAt])
  @@map("billing_history")
}

// ==================================================
// NOTES & BOOKMARKS
// ==================================================

model Note {
  id         String          @id @default(cuid())
  title      String?         @db.VarChar(255)
  content    String          @db.Text
  isPinned   Boolean         @default(false)
  color      String?         @db.VarChar(7)
  entityType NoteEntityType?
  entityId   String?         @db.VarChar(50)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  deletedAt  DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  @@index([organizationId])
  @@index([authorId])
  @@index([entityType, entityId])
  @@index([deletedAt])
  @@map("notes")
}

model Bookmark {
  id         String             @id @default(cuid())
  name       String?            @db.VarChar(255)
  entityType BookmarkEntityType
  entityId   String             @db.VarChar(50)
  order      Int                @default(0)
  createdAt  DateTime           @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, entityType, entityId])
  @@index([userId])
  @@map("bookmarks")
}

// ==================================================
// 1. KNOWLEDGE BASE & DOCUMENTATION
// ==================================================

model KnowledgeBase {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Relations
  categories KnowledgeCategory[]

  @@unique([organizationId, name])
  @@map("knowledge_bases")
}

model KnowledgeCategory {
  id          String              @id @default(cuid())
  name        String              @db.VarChar(255)
  description String?             @db.Text
  parentId    String? // For sub-categories
  parent      KnowledgeCategory?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction)
  children    KnowledgeCategory[] @relation("SubCategories")
  order       Int                 @default(0)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  knowledgeBaseId String

  // Relations
  faqs      FAQ[]
  tutorials Tutorial[]
  videos    VideoLibrary[]

  @@index([knowledgeBaseId])
  @@index([parentId])
  @@map("knowledge_categories")
}

model FAQ {
  id        String   @id @default(cuid())
  question  String   @db.Text
  answer    String   @db.Text
  isActive  Boolean  @default(true)
  viewCount Int      @default(0)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   KnowledgeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  createdBy   User?   @relation("FAQAuthor", fields: [createdById], references: [id], onDelete: SetNull)
  createdById String?

  @@index([categoryId])
  @@map("faqs")
}

model Tutorial {
  id            String         @id @default(cuid())
  title         String         @db.VarChar(500)
  content       String         @db.Text
  status        TutorialStatus @default(DRAFT)
  estimatedTime Int? // in minutes
  viewCount     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  category   KnowledgeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  author   User?   @relation("TutorialAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  authorId String?

  @@index([categoryId])
  @@index([authorId])
  @@map("tutorials")
}

model VideoLibrary {
  id          String        @id @default(cuid())
  title       String        @db.VarChar(500)
  description String?       @db.Text
  url         String        @db.VarChar(1000)
  provider    VideoProvider
  duration    Int? // in seconds
  viewCount   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  category   KnowledgeCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  uploader   User?   @relation("VideoUploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId String?

  @@index([categoryId])
  @@index([uploaderId])
  @@map("video_library")
}

// ==================================================
// 5. FINANCIAL MANAGEMENT ENHANCEMENT
// ==================================================

model ExpenseCategory {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Relations
  expenses Expense[]

  @@unique([organizationId, name])
  @@map("expense_categories")
}

model Expense {
  id          String        @id @default(cuid())
  description String        @db.Text
  amount      Float
  status      ExpenseStatus @default(PENDING)
  expenseDate DateTime
  receiptUrl  String?       @db.VarChar(1000)
  notes       String?       @db.Text
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  category   ExpenseCategory @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId String

  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  vendor   Vendor? @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  vendorId String?

  @@index([organizationId])
  @@index([categoryId])
  @@index([projectId])
  @@index([userId])
  @@map("expenses")
}

model Vendor {
  id            String   @id @default(cuid())
  name          String   @db.VarChar(255)
  contactPerson String?  @db.VarChar(255)
  email         String?  @db.VarChar(255)
  phone         String?  @db.VarChar(50)
  address       String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  // Relations
  expenses       Expense[]
  purchaseOrders PurchaseOrder[]

  @@unique([organizationId, name])
  @@map("vendors")
}

model PurchaseOrder {
  id           String              @id @default(cuid())
  poNumber     String              @db.VarChar(100)
  status       PurchaseOrderStatus @default(DRAFT)
  totalAmount  Float
  issueDate    DateTime            @default(now())
  deliveryDate DateTime?
  notes        String?             @db.Text
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  vendor   Vendor @relation(fields: [vendorId], references: [id], onDelete: Restrict)
  vendorId String

  approvedBy   User?   @relation("PurchaseOrderApprover", fields: [approvedById], references: [id], onDelete: SetNull)
  approvedById String?

  @@unique([organizationId, poNumber])
  @@map("purchase_orders")
}

model CreditNote {
  id               String           @id @default(cuid())
  creditNoteNumber String           @db.VarChar(100)
  reason           String           @db.Text
  amount           Float
  status           CreditNoteStatus @default(OPEN)
  issuedDate       DateTime         @default(now())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String

  originalInvoice   Invoice? @relation(fields: [originalInvoiceId], references: [id], onDelete: SetNull)
  originalInvoiceId String?

  @@unique([organizationId, creditNoteNumber])
  @@map("credit_notes")
}

model BudgetCategory {
  id             String               @id @default(cuid())
  name           String               @db.VarChar(255)
  budgetedAmount Float
  period         BudgetCategoryPeriod
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  projectId String?

  @@unique([organizationId, name, period, projectId])
  @@map("budget_categories")
}

model PaymentSchedule {
  id          String                @id @default(cuid())
  description String                @db.Text
  amount      Float
  dueDate     DateTime
  status      PaymentScheduleStatus @default(PENDING)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String

  @@index([invoiceId])
  @@map("payment_schedules")
}
